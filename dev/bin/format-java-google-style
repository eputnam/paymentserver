#!/usr/bin/env bash
# Usage: format-java-google-style [options...]
#
# Format Java files using the Google Java Format tool and add
# a new Git commit with all the changes.
#
# To skip adding a new commit use the --amend flag to instead
# amend the previous commit with formatting changes.
#
# By default, only .java files changed on the current Git branch
# will be formatted.
#
# Changed files are determined by comparing the current branch with
# the configured upstream branch, or main branch if no upstream
# is set.
#
# To format all .java files found in the repository, use the
# --all-files flag.
#
# For more information on the Google Java Format tool see
# https://github.com/google/google-java-format
#
# Options:
#
#  -h, --help     Print usage information and exit
#
#  --dry-run      Don't modify anything, just list files that would be modified
#                 and exit with code 1
#
#  --all-files    Format all .java files under src/main/java and src/test/java
#
#  --amend        Amend formatting changes to HEAD instead of adding a new commit
#
#  --no-commit    Leave changes unstaged instead of committing them
#
#  --allow-dirty  Run the formatter even if there are uncommitted changes

# Parse arguments
opt_dry_run=false
opt_all_files=false
opt_amend=false
opt_no_commit=false
opt_allow_dirty=false
for i in "$@"; do
    case $i in
        --help|-h)
            # Print comment block at top of file as help text
            sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' < "$0"
            exit
            ;;
        --dry-run)
            opt_dry_run=true
            ;;
        --all-files)
            opt_all_files=true
            ;;
        --amend)
            opt_amend=true
            ;;
        --no-commit)
            opt_no_commit=true
            ;;
        --allow-dirty)
            opt_allow_dirty=true
            ;;
        *)
            echo "ERROR: unknown option '$i'"
            echo "See -h, --help for usage"
            exit 1
            ;;
    esac
done

# Check for existing changes if not a dry run
if ! $opt_dry_run && ! $opt_allow_dirty; then
    # Exit early if there are any changes to tracked files,
    # as we don't want to mix in our formatting changes
    if ! git diff --quiet || ! git diff --staged --quiet; then
        echo "ERROR: Commit or remove changes first (or use --allow-dirty)"
        exit 1
    fi
fi

version=1.15.0
url=https://github.com/google/google-java-format/releases/download/v${version}/google-java-format-${version}-all-deps.jar
jar=/tmp/google-java-format-${version}-all-deps.jar

# Skip sorting imports and just let your IDE do that
# following standard Java formatting conventions
format_flags="--set-exit-if-changed --skip-sorting-imports"
if $opt_dry_run; then
    format_flags+=" --dry-run"
else
    format_flags+=" --replace"
fi

# Download uberjar into /tmp directory if we don't have it
if [ ! -f $jar ]; then
    > $jar curl --silent --show-error --location $url
fi

if $opt_all_files; then
    # Run formatter on all java files
    find src/main/java src/test/java \
         -type f \
         -name '*.java' \
         -exec java -jar $jar $format_flags {} +

    # Exit if nothing was changed
    [ $? -eq 0 ] && exit

    # Exit if dry run (assume files are listed on stdout)
    $opt_dry_run && exit 1

    # Don't commit changes if flag is specified
    $opt_no_commit && exit

    # Stage files for commit later, but skip untracked files
    git add --update src/main/java src/test/java
else
    # Get paths of changed .java files in all commits between
    # the current branch and upstream (or main).
    # Ignore files that were deleted.
    upstream=$(git rev-parse --abbrev-ref '@{upstream}' 2> /dev/null)
    [ -z "$upstream" ] && upstream=main
    changed_java_files=$(git diff "$upstream" HEAD --name-only --diff-filter=d \
                             | grep "\.java$")

    # Exit early if there's no java files to format
    [ -z "$changed_java_files" ] && exit

    # Run formatter and make changes directly to files.
    #
    # Run from the root project directory since git diff
    # will return filepaths relative to the root directory
    cd "$(git rev-parse --show-toplevel)"
    java -jar $jar $format_flags $changed_java_files

    # Exit if nothing was changed
    [ $? -eq 0 ] && exit

    # Exit if dry run (assume files are listed on stdout)
    $opt_dry_run && exit 1

    # Don't commit changes if flag is specified
    $opt_no_commit && exit

    # Stage files for commit later
    git add $changed_java_files
fi

# Commit formatting changes
if $opt_amend; then
    git commit --amend --reuse-message=HEAD
else
    git commit \
        --message "(maint) Format Java source files" \
        --message "This commit was generated by scripts/$(basename $0)"
fi
